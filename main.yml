---
- name: "Deploy"
  hosts: localhost
  tasks:  
    - name: "Initiating Terraform"
      community.general.terraform:
        project_path: "./terraform/"
        force_init: true
        state: present
      register: terraform

    - name: "Setting Dynamic Inventory File"
      add_host:
        groups: "aws"
        name: "{{ item }}"
        ansible_user: "ec2-user"
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "./key.key" 
        ansible_host: "{{ item }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: 
        - "{{ terraform.outputs.ServerPublicIP.value }}"

    - name: "Waiting for the Instances"
      wait_for:
        timeout: 20
      when: terraform.changed    

- name: "Provision"
  hosts: aws
  vars:
    repo: REPO_URL
    image_name: simple
    docker_user: DOCKER_USER
    docker_pass: DOCKER_PASS
    ct_name: app
    network_name: network_one
    ct_port: CONTAINER_PORT  
    serial: 1
    packages:
      - docker
      - git
      - pip  
  become: true
  tasks:
    - name: "Updating"
      yum:
        name: '*'
        state: present

    - name: "Getting Installed packages"
      package_facts:
        manager: auto           

    - name: "Installing"
      yum: 
        name: "{{ packages }}"
        state: present
      when: "'docker' not in ansible_facts.packages" 
      register: install 
    
    - name: "Checking Docker module"
      pip:
        name: docker-py
        state: present
      when: install.changed  
    
    - name: "Starting/Re-starting Docker"
      service:
        name: docker
        state: restarted
        enabled: true
      register: start
      when: install.changed    

    - name: "Pulling Docker file and Flask Script from Git"
      git:
        repo: "{{ repo }}"
        dest: /usr/local/src/git_file/ 
      register: pull_status    

    - name: "Authenticating Docker Hub"
      docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_pass }}"   
        state: present 
      when: start.changed == true or pull_status.changed == true 
      register: login    
      run_once: true

        
    - name: "Building Image From Docker File"
      docker_image:
        build:
          path: /usr/local/src/git_file/
          pull: true  
        name: "{{ docker_user }}/{{ image_name }}"
        tag: "{{ item }}"
        source: build
        push: yes
        force_tag: true
        force_source: true
      with_items: 
        - "{{ pull_status.after }}"
        - latest  
      when: pull_status.changed    
      run_once: true  

    - name: "Loging out From Docker Hub"
      docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_pass }}"
        state: absent
      when: login.changed
      run_once: true  
        ############################################################ Build Finished ###############

    - name: "Pulling Latest Image form Hub"
      docker_image:
        name: "{{ docker_user }}/{{ image_name }}:latest"
        source: pull
        force_source: true
        state: present   
    
    - name: "Create network"
      docker_network:
        name: "{{ network_name }}"
      register: nw    

    - name: "Building Containers with {{ docker_user }}/{{ image_name }}:latest"
      docker_container:
        name: "{{ ct_name }}-{{ item }}"
        image: "{{ docker_user }}/{{ image_name }}:latest"
        recreate: true
        networks:
          - name: "{{ network_name }}"  
        state: started
      with_sequence: count=2  
      when: pull_status.changed == true or nw.changed == true

    - name: "Setting Nginx Conf"
      template:
        src: "./nginx.conf"
        dest: "/usr/local/src/git_file/nginx/nginx.conf"
      register: nginxconf    

    - name: "Craeting Container Nginx to Load balance"
      docker_image:
        build:
          path: /usr/local/src/git_file/nginx
          pull: true
        name: "nginx"
        tag: "builds"
        force_tag: true    
      when: nginxconf.changed    

    - name: "Starting nginx container"
      docker_container:
        name: "nginx"
        image: "nginx:builds"
        networks:
          - name: "{{ network_name }}"
        state: started
        published_ports: 80:80 
      when: nginxconf.changed == true or nw.changed ==true     
